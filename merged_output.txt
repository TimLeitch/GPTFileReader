C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/app/auth.py

from . import models
from sqlalchemy.orm import Session

from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


# In your authentication module (e.g., auth.py)


def authenticate_user(username: str, password: str, db: Session):
    user = db.query(models.User).filter(
        models.User.username == username).first()
    if not user:
        return None
    if not pwd_context.verify(password, user.hashed_password):
        return None
    return user


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/app/database.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base

SQLALCHEMY_DATABASE_URL = "sqlite:///./sql_app.db"  # or your actual database URL

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/app/dependencies.py

# backend/app/dependencies.py
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt
from . import models

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


def get_current_user(token: str = Depends(oauth2_scheme)):
    # Decode and verify JWT token
    # Fetch user from DB and return
    return user


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/app/main.py

# Import necessary modules
from fastapi import FastAPI, Depends, HTTPException, status, Request, APIRouter
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from jose import JWTError, jwt
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from msal import ConfidentialClientApplication
from .msal_config import load_msal_app, REDIRECT_PATH
from starlette.responses import RedirectResponse

# Import local modules
from . import models, schema, database, auth

# Create database tables
models.Base.metadata.create_all(bind=database.engine)

# Initialize FastAPI app
app = FastAPI()
router = APIRouter()
# Dependency function to get database session


def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()
### Main Endpoints ###
# Root endpoint


@app.get("/")
async def read_root():
    return {"msg": "Hello World"}

### MSAL Endpoints ###


@router.get("/msal")
async def msal(request: Request):
    msal_app = load_msal_app()
    auth_url = msal_app.get_authorization_request_url(["user.read"])
    return RedirectResponse(auth_url)


@router.get("/msal/redirect")
async def msal_redirect(request: Request):
    msal_app = load_msal_app()
    result = msal_app.acquire_token_by_auth_code_flow(
        request.query_params["code"],
        scopes=["user.read"],
        redirect_uri="http://localhost:8000/msal/redirect",
    )
    return result

app.include_router(router)


### User endpoints ###

# Create user endpoint


@app.post("/register/")
async def register(user: schema.UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(
        models.User.email == user.email).first()
    if db_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail="Email already registered")
    hashed_password = auth.pwd_context.hash(user.password)
    db_user = models.User(**user.model_dump())
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user


@app.post("/login/")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = auth.authenticate_user(form_data.username, form_data.password, db)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    # Create JWT token (not shown here for brevity)
    token = create_access_token(data={"sub": user.username})
    return {"access_token": token, "token_type": "bearer"}


# Read user endpoint


@app.get("/users/{user_id}", response_model=schema.User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(
        models.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    return db_user

# Update user endpoint


@app.put("/users/{user_id}", response_model=schema.User)
def update_user(user_id: int, user: schema.UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(
        models.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="User not found")

    update_data = user.model_dump()
    for key, value in update_data.items():
        setattr(db_user, key, value)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# Delete user endpoint


@app.delete("/users/{user_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(
        models.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    db.delete(db_user)
    db.commit()
    return {"message": "User deleted"}

# List users endpoint


@app.get("/users/", response_model=list[schema.User])
def list_users(db: Session = Depends(get_db)):
    return db.query(models.User).all()


#### Contact endpoints####
# Create contact endpoint
@app.post("/contacts/", response_model=schema.Contact)
def create_contact(contact: schema.ContactCreate, db: Session = Depends(get_db)):
    db_contact = models.Contact(**contact.model_dump())
    db.add(db_contact)
    db.commit()
    db.refresh(db_contact)
    return db_contact

# Read contact endpoint


@app.get("/contacts/{contact_id}", response_model=schema.Contact)
def read_contact(contact_id: int, db: Session = Depends(get_db)):
    db_contact = db.query(models.Contact).filter(
        models.Contact.id == contact_id).first()
    if db_contact is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Contact not found")
    return db_contact

# Update contact endpoint


@app.put("/contacts/{contact_id}", response_model=schema.Contact)
def update_contact(contact_id: int, contact: schema.ContactCreate, db: Session = Depends(get_db)):
    db_contact = db.query(models.Contact).filter(
        models.Contact.id == contact_id).first()
    if db_contact is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Contact not found")

    update_data = contact.model_dump()
    for key, value in update_data.items():
        setattr(db_contact, key, value)
    db.add(db_contact)
    db.commit()
    db.refresh(db_contact)
    return db_contact

# Delete contact endpoint


@app.delete("/contacts/{contact_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_contact(contact_id: int, db: Session = Depends(get_db)):
    db_contact = db.query(models.Contact).filter(
        models.Contact.id == contact_id).first()
    if db_contact is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Contact not found")
    db.delete(db_contact)
    db.commit()
    return {"message": "Contact deleted"}

# List contacts endpoint


@app.get("/contacts/", response_model=list[schema.Contact])
def list_contacts(db: Session = Depends(get_db)):
    return db.query(models.Contact).all()


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/app/models.py

# backend/app/models.py
from sqlalchemy import Column, Integer, String, DateTime, Boolean, JSON
from sqlalchemy.orm import declarative_base
from sqlalchemy.sql import func
from .database import Base


class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, index=True)
    email = Column(String(100), unique=True, index=True)
    hashed_password = Column(String(100))


class Contact(Base):
    __tablename__ = 'contacts'

    id = Column(Integer, primary_key=True)
    # Corresponds to the Microsoft contact ID
    ms_id = Column(String, unique=True)
    display_name = Column(String)
    given_name = Column(String)
    surname = Column(String)
    job_title = Column(String)
    company_name = Column(String)
    department = Column(String)
    office_location = Column(String)
    email_addresses = Column(JSON)  # Store as JSON
    home_phones = Column(JSON)      # Store as JSON
    mobile_phone = Column(String)
    business_phones = Column(JSON)  # Store as JSON
    job_title = Column(String)
    business_address = Column(JSON)  # Store as JSON
    catagories = Column(JSON)  # Store as JSON
    should_sync = Column(Boolean, default=True)


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/app/msal_config.py

# backend/app/msal_config.py
from msal import ConfidentialClientApplication

CLIENT_ID = "db3628c5-2bba-46d9-8e70-2adadbf8f1cd"
CLIENT_SECRET = "1mS8Q~Ywr5E-x1pL-bzAAwNXhSqtvvUeu5UcfbAM"
AUTHORITY = "https://login.microsoftonline.com/97ff8bc9-860d-406d-96b7-ae203e3239de"
REDIRECT_PATH = "/msal/redirect"  # Set as per your Azure AD app registration


def load_msal_app(cache=None):
    return ConfidentialClientApplication(
        CLIENT_ID, authority=AUTHORITY,
        client_credential=CLIENT_SECRET, token_cache=cache)

# Add more configurations as necessary


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/app/schema.py

# backend/app/schemas.py
from pydantic import BaseModel, ConfigDict
from typing import List, Optional, Any


class UserCreate(BaseModel):
    username: str
    email: str
    password: str


class UserBase(BaseModel):
    id: int
    username: str
    email: str

    class Config():
        from_attribute = True


class User(UserBase):
    pass


class ContactBase(BaseModel):
    display_name: Optional[str] = None
    given_name: Optional[str] = None
    surname: Optional[str] = None
    job_title: Optional[str] = None
    company_name: Optional[str] = None
    department: Optional[str] = None
    office_location: Optional[str] = None
    email_addresses: Optional[List[Any]] = None
    home_phones: Optional[List[Any]] = None
    mobile_phone: Optional[str] = None
    business_phones: Optional[List[Any]] = None
    business_address: Optional[dict] = None
    catagories: Optional[List[Any]] = None
    should_sync: bool = True

    class Config():
        from_attribute = True


class ContactCreate(ContactBase):
    pass


class Contact(ContactBase):
    id: int


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/tests/test_api.py

from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.main import app
from app.database import Base
from app.auth import authenticate_user

# Setup TestClient and Database
client = TestClient(app)

SQLALCHEMY_DATABASE_URL = "sqlite:///./test_sql_app.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
TestingSessionLocal = sessionmaker(
    autocommit=False, autoflush=False, bind=engine)

Base.metadata.create_all(bind=engine)


def get_user_token():
    # Register a new user
    user_data = {
        "username": "testuser",
        "email": "testuser@example.com",
        "password": "testpassword"
    }
    client.post("/register/", json=user_data)

    # Login to get token
    login_data = {
        "username": "testuser",
        "password": "testpassword"
    }
    response = client.post("/login/", data=login_data)
    return response.json().get("access_token")

# Test reading the main endpoint


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}

# Test creating a contact


def test_create_contact():
    token = get_user_token()
    response = client.post(
        "/contacts/",
        json={"display_name": "John Doe", "email_addresses": [
            {"address": "johndoe@example.com"}]},
        headers={"Authorization": f"Bearer {token}"}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["display_name"] == "John Doe"
    assert "id" in data

# Test reading a contact


def test_read_contact():
    token = get_user_token()
    # Assume contact ID 1 exists, adjust as necessary
    response = client.get(
        "/contacts/1", headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200
    data = response.json()
    assert "id" in data

# Test updating a contact


def test_update_contact():
    token = get_user_token()
    update_data = {"display_name": "Jane Updated",
                   "email_addresses": [{"address": "janeupdated@example.com"}]}
    response = client.put("/contacts/1", json=update_data,
                          headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200
    data = response.json()
    assert data["display_name"] == "Jane Updated"

# Test deleting a contact


def test_delete_contact():
    token = get_user_token()
    response = client.delete(
        "/contacts/1", headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200 or response.status_code == 204


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/tests/test_contact_model.py

import pytest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models import Base, Contact
from .conftest import db_session


def test_create_contact(db_session):
    new_contact = Contact(
        ms_id="ms123",
        display_name="John Doe",
        given_name="John",
        surname="Doe",
        email_addresses=[
            {"address": "johndoe@example.com", "name": "John Doe"}],
        job_title="Developer",
        company_name="Example Corp",
        department="Engineering",
        office_location="New York",
        home_phones=["123-456-7890"],
        mobile_phone="123-456-7890",
        business_phones=["123-456-7890"],
        business_address={
            "street": "123 Example Street",
            "city": "Example City",
            "state": "NY",
            "countryOrRegion": "USA",
            "postalCode": "10001"
        },
        catagories=["Example Catagory"],
        should_sync=True
    )
    db_session.add(new_contact)
    db_session.commit()
    assert new_contact.id is not None


def test_read_contact(db_session):
    contact = Contact(
        ms_id="ms123",
        display_name="Jane Doe",
        given_name="John",
        surname="Doe",
        email_addresses=[
            {"address": "johndoe@example.com", "name": "John Doe"}],
        job_title="Developer",
        company_name="Example Corp",
        department="Engineering",
        office_location="New York",
        home_phones=["123-456-7890"],
        mobile_phone="123-456-7890",
        business_phones=["123-456-7890"],
        business_address={
            "street": "123 Example Street",
            "city": "Example City",
            "state": "NY",
            "countryOrRegion": "USA",
            "postalCode": "10001"
        },
        catagories=["Example Catagory"],
        should_sync=True

    )
    db_session.add(contact)
    db_session.commit()
    retrieved_contact = db_session.query(
        Contact).filter(Contact.id == contact.id).first()
    assert retrieved_contact == contact


def test_update_contact(db_session):
    contact = Contact(
        ms_id="ms123",
        given_name="John",
        surname="Doe",
        email_addresses=[
            {"address": "johndoe@example.com", "name": "John Doe"}],
        job_title="Developer",
        company_name="Example Corp",
        department="Engineering",
        office_location="New York",
        home_phones=["123-456-7890"],
        mobile_phone="123-456-7890",
        business_phones=["123-456-7890"],
        business_address={
            "street": "123 Example Street",
            "city": "Example City",
            "state": "NY",
            "countryOrRegion": "USA",
            "postalCode": "10001"
        },
        catagories=["Example Catagory"],
        should_sync=True
    )
    db_session.add(contact)
    db_session.commit()
    contact.company_name = "New Company"
    db_session.commit()
    updated_contact = db_session.query(Contact).filter(
        Contact.id == contact.id).first()
    assert updated_contact.company_name == "New Company"


def test_delete_contact(db_session):
    contact = Contact(
        ms_id="ms123",
        given_name="John",
        surname="Doe",
        email_addresses=[
            {"address": "johndoe@example.com", "name": "John Doe"}],
        job_title="Developer",
        company_name="Example Corp",
        department="Engineering",
        office_location="New York",
        home_phones=["123-456-7890"],
        mobile_phone="123-456-7890",
        business_phones=["123-456-7890"],
        business_address={
            "street": "123 Example Street",
            "city": "Example City",
            "state": "NY",
            "countryOrRegion": "USA",
            "postalCode": "10001"
        },
        catagories=["Example Catagory"],
        should_sync=True
    )
    db_session.add(contact)
    db_session.commit()
    db_session.delete(contact)
    db_session.commit()
    deleted_contact = db_session.query(Contact).filter(
        Contact.id == contact.id).first()
    assert deleted_contact is None


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/tests/test_db_connection.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models import Base

SQLALCHEMY_DATABASE_URL = "sqlite:///./test_db.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
TestingSessionLocal = sessionmaker(
    autocommit=False, autoflush=False, bind=engine)


def test_create_tables():
    Base.metadata.create_all(bind=engine)
    # Additional checks can be added to verify table creation


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/tests/test_login_user.py



C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/tests/test_main.py

# TSync/backend/tests/test_main.py
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}


C:/Users/TimLeitch/OneDrive - TerraFirma Foundation Systems/Documents/.Code/TSync\backend/tests/test_register_user.py



